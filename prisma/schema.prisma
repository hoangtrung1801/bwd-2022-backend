// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique
  password   String
  firstName  String
  lastName   String
  phone      String
  address    Address
  payments   Payment[]
  role       Role      @default(USER)
  createdAt  DateTime  @default(now())
  modifiedAt DateTime  @default(now()) @updatedAt
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  desc        String
  price       Float
  // imageUrls   String[]
  categoryIDs String[]    @db.ObjectId
  categories  Category[]  @relation(fields: [categoryIDs], references: [id])
  createdAt   DateTime    @default(now())
  modifiedAt  DateTime    @default(now()) @updatedAt
  OrderItem   OrderItem[]
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  total      Float
  items      OrderItem[]
  itemIDs    String[]
  payment    Payment?    @relation(fields: [paymentID], references: [id], onDelete: Cascade)
  paymentID  String?     @unique @db.ObjectId
  createdAt  DateTime    @default(now())
  modifiedAt DateTime    @default(now()) @updatedAt
}

model Payment {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  status     PaymentStatus @default(WAITING)
  user       User          @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID     String        @db.ObjectId
  order      Order?
  orderID    String?       @db.ObjectId
  createdAt  DateTime      @default(now())
  modifiedAt DateTime      @default(now()) @updatedAt
}

model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  label      String
  productIDs String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIDs], references: [id])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productID], references: [id], onDelete: Cascade)
  productID String  @db.ObjectId
  quantity  Int
  Order     Order?  @relation(fields: [orderID], references: [id], onDelete: Cascade)
  orderID   String? @db.ObjectId
}

enum PaymentStatus {
  WAITING
  SHIPPING
  COMPLETED
}

enum Role {
  USER
  ADMIN
}

type Address {
  addressLine String
  city        String
  country     String
  phone       String
}
